// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VCCrypto
import CommonCrypto
import Foundation
import Secp256k1
import Swift
@_exported import VCCrypto
public struct Sha512 {
  public init()
  public func hash(data: Foundation.Data) -> Foundation.Data
}
public protocol SecretStoring {
  func getSecret(id: Foundation.UUID, itemTypeCode: Swift.String) throws -> Foundation.Data
  func saveSecret(id: Foundation.UUID, itemTypeCode: Swift.String, value: inout Foundation.Data) throws
}
public protocol CryptoOperating {
  func generateKey() throws -> VCCryptoSecret
  func retrieveKeyFromStorage(withId id: Foundation.UUID) throws -> VCCryptoSecret
}
public struct CryptoOperations : CryptoOperating {
  public init()
  public init(secretStore: SecretStoring)
  public func generateKey() throws -> VCCryptoSecret
  public func retrieveKeyFromStorage(withId id: Foundation.UUID) throws -> VCCryptoSecret
}
extension Data {
  public init?(base64URLEncoded base64URLString: Swift.String)
  public func base64URLEncodedString() -> Swift.String
}
extension Data {
  public init(hexString: Swift.String)
  public func toHexString() -> Swift.String
}
public struct HmacSha512 {
  public func authenticate(message: Foundation.Data, withSecret secret: VCCryptoSecret) throws -> Foundation.Data
  public func isValidAuthenticationCode(_ mac: Foundation.Data, authenticating message: Foundation.Data, withSecret secret: VCCryptoSecret) throws -> Swift.Bool
}
public struct Sha256 {
  public init()
  public func hash(data: Foundation.Data) -> Foundation.Data
}
public protocol VCCryptoSecret {
  var id: Foundation.UUID { get }
}
public struct Secp256k1 : Signing {
  public init()
  public func sign(messageHash: Foundation.Data, withSecret secret: VCCryptoSecret) throws -> Foundation.Data
  public func isValidSignature(signature: Foundation.Data, forMessageHash messageHash: Foundation.Data, usingPublicKey publicKey: Secp256k1PublicKey) throws -> Swift.Bool
  public func createPublicKey(forSecret secret: VCCryptoSecret) throws -> Secp256k1PublicKey
}
public class Secp256k1PublicKey {
  final public let x: Foundation.Data
  final public let y: Foundation.Data
  public init?(uncompressedPublicKey: Foundation.Data)
  public init?(x: Foundation.Data, y: Foundation.Data)
  @objc deinit
}
public protocol Signing {
  func sign(messageHash: Foundation.Data, withSecret secret: VCCryptoSecret) throws -> Foundation.Data
  func isValidSignature(signature: Foundation.Data, forMessageHash messageHash: Foundation.Data, usingPublicKey publicKey: Secp256k1PublicKey) throws -> Swift.Bool
  func createPublicKey(forSecret secret: VCCryptoSecret) throws -> Secp256k1PublicKey
}
